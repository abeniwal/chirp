import Head from "next/head";
import { SignInButton, useUser } from "@clerk/nextjs"
import Image from "next/image";

import { RouterOutputs, api } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";
import toast from "react-hot-toast";
import Link from "next/link";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx =  api.useUtils();

  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (!!errorMessage && !!errorMessage[0]) {
        toast.error(errorMessage[0]);
      }
      else {
        toast.error("Failed to post! Please try again later.");
      }
    }
  });

  if (!user) return null;

  return <div className="flex gap-3 w-full">
    <Image src={user.imageUrl} alt="Proile image" className="w-14 h-14 rounded-full" width={56} height={56} />
    <input
      placeholder="Type some emojis!"
      className="bg-transparent grow outline-none"
      type="text"
      value={input}
      onChange={(e) => setInput(e.target.value)}
      onKeyDown={(e) =>  {
        if (e.key == "Enter") {
          e.preventDefault();
          if (input !== "") {
            mutate({content: input});
          }
        }
      }}
      disabled={isPosting}
    />
    {input !== "" && !isPosting && (
      <button onClick={() => mutate({ content: input })}>Post</button>
    )}
    {isPosting && (
      <div className="flex justify-center items-center">
        <LoadingSpinner size={20}/>
      </div>
    )}
  </div>;
};

type PostWithUser = RouterOutputs["post"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const {post, author} = props;
  return (
    <div className="flex p-4 gap-3 border-b border-slate-400" key={post.id}>  
      <Image src={author.imageUrl} className="w-14 h-14 rounded-full" alt={`@${author.username}'s profile image`} width={56} height={56} />
      <div className="flex flex-col">
        <div className="flex text-slate-300 gap-1">
          <Link href={`/@${author.username}`}><span>{`@${author.username}`}</span></Link>
          <Link href={`/post/${post.id}`}><span className="font-thin">{`Â· ${dayjs(post.createdAt).fromNow()}`}</span></Link>
        </div>
        <span className="text-2xl">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return "Something went wrong";

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id}/>
      ))}
    </div>
  );
};

export default function Home() {
  const { isLoaded: userLoaded, isSignedIn } = useUser();
  const { data } = api.post.getAll.useQuery(); // start fetching data asap

  if (!userLoaded) return <div />;
  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="w-full md:max-w-2xl border-x border-slate-400 h-full">
          <div className="border-b border-slate-400 p-4 flex">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
}
